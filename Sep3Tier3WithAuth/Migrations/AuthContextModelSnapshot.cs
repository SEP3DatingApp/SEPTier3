// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sep3Tier3WithAuth.Helpers;

namespace Sep3Tier3WithAuth.Migrations
{
    [DbContext(typeof(AuthContext))]
    partial class AuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Sep3Tier3WithAuth.Entities.PersonSexuality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SexualityName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonSexualities");
                });

            modelBuilder.Entity("Sep3Tier3WithAuth.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Sep3Tier3WithAuth.Entities.Administrator", b =>
                {
                    b.HasBaseType("Sep3Tier3WithAuth.Entities.User");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Sep3Tier3WithAuth.Entities.Fisher", b =>
                {
                    b.HasBaseType("Sep3Tier3WithAuth.Entities.User");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("PersonSexualityId")
                        .HasColumnType("integer");

                    b.Property<string>("PicRef")
                        .HasColumnType("text");

                    b.Property<string>("SexPref")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasIndex("PersonSexualityId");

                    b.HasDiscriminator().HasValue("Fisher");
                });

            modelBuilder.Entity("Sep3Tier3WithAuth.Entities.Fisher", b =>
                {
                    b.HasOne("Sep3Tier3WithAuth.Entities.PersonSexuality", null)
                        .WithMany("Fishers")
                        .HasForeignKey("PersonSexualityId");
                });
#pragma warning restore 612, 618
        }
    }
}
